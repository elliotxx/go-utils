// +build tools

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"time"

	git "go-utils/gitutil"
)

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	version, gitSha1Version := getAppVersion()
	buildTime := time.Now().Format("2006-01-02 15:04:05")

	data := make_update_version_go_file(version, gitSha1Version, buildTime)

	err := ioutil.WriteFile("./z_update_version.go", []byte(data), 0666)
	if err != nil {
		log.Fatalf("ioutil.WriteFile: err = %v", err)
	}

	verInfoData := genVersionInfo(version, gitSha1Version, buildTime)
	err = ioutil.WriteFile("VERSION", []byte(verInfoData), 0666)
	if err != nil {
		log.Fatalf("ioutil.WriteFile: err = %v", err)
	}

	fmt.Printf("%s (%s)\n", version, gitSha1Version)
	fmt.Println(buildTime)
}

func genVersionInfo(version, gitSha1Version, buildTime string) string {
	return fmt.Sprintf(`# Auto generated, DO NOT EDIT.

ShortVersion = %q
GitSha1Version = %q
BuildDate = %q
`,
		version,
		gitSha1Version,
		buildTime,
	)
}

func make_update_version_go_file(version, gitSha1Version, buildTime string) string {
	return fmt.Sprintf(`// Auto generated by 'go run gen.go', DO NOT EDIT.

package version

func init() {
	ShortVersion = %q
	GitSha1Version = %q
	BuildDate = %q
}
`,
		version,
		gitSha1Version,
		buildTime,
	)
}

func getAppVersion() (version, gitSha1Version string) {
	var (
		isDirty     bool
		isHeadAtTag bool
		headHash    string
		latestTag   string
		err         error
	)

	if headHash, err = git.GetHeadHash(); err != nil {
		log.Fatal(err)
	}
	if isDirty, err = git.IsDirty(); err != nil {
		log.Fatal(err)
	}

	if latestTag, err = git.GetLatestTag(); err != nil {
		log.Fatal(err)
	}

	if latestTag == "" {
		version = "{no-version}"
		gitSha1Version = headHash
	} else {
		version = latestTag
		if isHeadAtTag, err = git.IsHeadAtTag(latestTag); err != nil {
			log.Fatal(err)
		}
		if gitSha1Version, err = git.GetTagCommitSha(latestTag); err != nil {
			tags, _ := git.GetTagList()
			log.Fatal(tags, err)
		}
	}

	if !isHeadAtTag {
		gitSha1Version = headHash
		version += "+head"
	}
	if isDirty {
		version += "+dirty"
	}
	return
}
